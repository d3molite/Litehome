@page "/finance/expense/{Id}"
@using Demolite.Db.Enum
@using Litehome.Db.Enum
@using Litehome.Db.Models
@using Litehome.Services.Interfaces

@inject IHomeMemberService HomeMemberService
@inject IExpenseService ExpenseService
@inject IExpenseCategoryService ExpenseCategoryService

<MudTablePage>
    <TitleContent>
        <MudText Typo="Typo.h5">Expense Overview for @(Member?.Name ?? "Shared Account")</MudText>
    </TitleContent>
    <TableContent>
        <MudDataGrid
            Style="display: flex; flex-direction: column; height: 100%;"
            FixedHeader="true"
            Items="Expenses" EditTrigger="DataGridEditTrigger.OnRowClick" EditMode="DataGridEditMode.Form" ReadOnly="false">
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Name"/>
                <PropertyColumn Property="x => x.Amount" Title="Amount"/>
                <PropertyColumn Property="x => x.Frequency" Title="Frequency">
                    <EditTemplate>
                        <MudSelect @bind-Value="context.Item.Frequency" Variant="Variant.Outlined" Label="Frequency">
                            @foreach (var frequency in Enum.GetValues<Frequency>())
                            {
                                <MudSelectItem Value="@frequency">@frequency.ToString()</MudSelectItem>
                            }
                        </MudSelect>
                    </EditTemplate>
                </PropertyColumn>
                <TemplateColumn Title="Category">
                    <EditTemplate>
                        <MudSelect @bind-Value="context.Item.ExpenseCategory" Variant="Variant.Outlined" Label="Category">
                            @foreach (var expenseCategory in ExpenseCategoryService.ExpenseCategories)
                            {
                                <MudSelectItem Value="expenseCategory">@expenseCategory.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </EditTemplate>
                    <CellTemplate>
                        @context.Item.ExpenseCategory?.Name
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Booking Date">
                    <EditTemplate>
                        @if (context.Item.HasDate)
                        {
                            <MudDatePicker Variant="Variant.Outlined" Label="Booking Date" @bind-Date="@context.Item.Date"></MudDatePicker>
                        }

                    </EditTemplate>
                    <CellTemplate>
                        @( @context.Item.HasDate ? context.Item.Date?.ToString("dd.MM.yyyy") : "Expense is Monthly")
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.IsSavings" Title="Savings Expense?">
                    <EditTemplate>
                        <MudCheckBox T="bool" @bind-Value="context.Item.IsSavings" Label="Savings Expense?"/>
                    </EditTemplate>
                </PropertyColumn>
                <TemplateColumn>
                    <CellTemplate>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" @onclick="() => Delete(context.Item!)">Delete</MudButton>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </TableContent>
    <TableActionContent>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" @onclick="AddNew"/>
    </TableActionContent>
    <SiteActionContent>
        <MudButton Variant="Variant.Outlined" Color="Color.Success" @onclick="Save">Save</MudButton>
    </SiteActionContent>
</MudTablePage>

@code {

    [Parameter]
    public required string Id { get; set; }
    
    private HomeMember? Member { get; set; }

    private List<Expense> Expenses { get; set; } = [];
    
    protected override async Task OnInitializedAsync()
    {
        await HomeMemberService.LoadMembers();
        await ExpenseCategoryService.LoadExpenseCategories();
        await ExpenseService.LoadExpenses();

        if (Id != "shared")
        {
            Member = HomeMemberService.Members.First(x => x.Id == Id);
            Expenses = ExpenseService.Expenses.Where(x => x.HomeMember == Member).ToList();
        }
        else
        {
            Expenses = ExpenseService.Expenses.Where(x => x.HomeMember is null).ToList();
        }
        
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task Save()
    {
        ExpenseService.UpdateExpenses(Expenses);
        await ExpenseService.SaveExpenses();
        await OnInitializedAsync();
    }

    private async Task AddNew()
    {
        Expenses.Add(new Expense()
        {
            Name = "Please enter name",
            HomeMemberId = Member?.Id,
            Amount = 0m,
            Frequency = Frequency.Monthly,
            OperationType = Operation.Created,
        });

        await InvokeAsync(StateHasChanged);
    }
    
    private async Task Delete(Expense expense)
    {
        if (expense.OperationType is Operation.Created)
            Expenses.Remove(expense);

        else
            expense.OperationType = Operation.Removed;

        await InvokeAsync(StateHasChanged);
    }

}