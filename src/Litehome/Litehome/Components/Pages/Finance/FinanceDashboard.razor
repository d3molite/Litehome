@page "/finance/dashboard"
@using Litehome.Db.Models
@using Litehome.Services.Interfaces
@using Litehome.Components.Items

@inject IHomeMemberService HomeMemberService
@inject IIncomeService IncomeService
@inject IExpenseService ExpenseService

<MudStack Class="flex-grow-1">
    <MudText Typo="Typo.h4">Monthly Finance Dashboard</MudText>
    <MudStack Row="true" Class="flex-grow-1">
        <MudStack Class="flex-grow-1">
            <MudGrid>
                <MudItem xs="2">
                </MudItem>
                @foreach (var member in HomeMemberService.Members)
                {
                    <MudDashboardBox Text="@member.Name"/>
                }
            </MudGrid>
            <MudGrid>
                <MudDashboardBox Xs="2" Text="Monthly Income"/>
                @foreach (var member in HomeMemberService.Members)
                {
                    <MudDashboardBox Text="@GetMemberIncomeString(member)"/>
                }
            </MudGrid>
            <MudGrid>
                <MudDashboardBox Xs="2" Text="Total Income"/>
                <MudDashboardBox Xs="4" Text="@GetTotalIncomeString()"/>
            </MudGrid>
            <MudGrid>
                <MudDashboardBox Xs="2" Text="Percentage"/>
                @foreach (var member in HomeMemberService.Members)
                {
                    <MudDashboardBox Text="@GetMemberPercentageString(member)"/>
                }
            </MudGrid>
            <MudGrid>
                <MudDashboardBox Xs="2" Text="Monthly Shared Expenses"/>
                <MudDashboardBox Xs="4" Text="@GetSharedExpenseString()"/>
            </MudGrid>
            <MudGrid>
                <MudDashboardBox Xs="2" Text="Monthly Expense Budget"/>
                <MudDashboardBox Xs="4" Text="@GetExpenseBudgetString()"/>
            </MudGrid>
        </MudStack>
    </MudStack>

</MudStack>

@code {

    protected override async Task OnInitializedAsync()
    {
        await HomeMemberService.LoadMembers();
        await IncomeService.LoadIncomes();
        await ExpenseService.LoadExpenses();

        await InvokeAsync(StateHasChanged);
    }

    private string GetMemberIncomeString(HomeMember member)
        => FormatCurrency(GetMemberIncome(member));

    private string GetTotalIncomeString()
        => FormatCurrency(GetTotalIncome());

    private string GetMemberPercentageString(HomeMember member)
    {
        var income = GetMemberIncome(member);
        var total = GetTotalIncome();

        var percentage = income / total;

        return $"{percentage:P}";
    }

    private string GetSharedExpenseString()
        => FormatCurrency(GetSharedSpending());

    private string GetExpenseBudgetString()
        => FormatCurrency(GetRoundedSharedSpending());

    private decimal GetMemberIncome(HomeMember member)
        => IncomeService.Incomes.Where(x => x.HomeMember == member).Sum(x => x.MonthlyAmount);

    private decimal GetTotalIncome()
        => IncomeService.Incomes.Sum(x => x.MonthlyAmount);

    private decimal GetSharedSpending()
        => ExpenseService.Expenses.Where(x => x.IsShared).Sum(x => x.MonthlyAmount);

    private decimal GetRoundedSharedSpending()
    {
        var amount = GetSharedSpending();
        return Math.Round(amount / 100, 2) * 100;
    }

    private decimal GetMemberSpending(HomeMember member, bool isSavings = false)
        => ExpenseService.Expenses.Where(x => x.HomeMember == member && x.IsSavings == isSavings).Sum(x => x.MonthlyAmount);

    private string FormatCurrency(decimal input)
        => $"{input:F2} €";

}